{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dssql",
						"type": "DatasetReference"
					},
					"name": "customersource"
				},
				{
					"dataset": {
						"referenceName": "dssql",
						"type": "DatasetReference"
					},
					"name": "dimcustomersource"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "selectsrc"
				},
				{
					"name": "selecttrg"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          Fname as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM customer\\n',",
				"     format: 'query') ~> customersource",
				"source(output(",
				"          Custkey as integer,",
				"          CustomerID as integer,",
				"          Fname as string,",
				"          Location as string,",
				"          StartDate as date,",
				"          EndDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM dimcustomer\\n',",
				"     format: 'query') ~> dimcustomersource",
				"customersource select(mapColumn(",
				"          src_CustomerID = CustomerID,",
				"          src_Fname = Fname,",
				"          src_Location = Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectsrc",
				"dimcustomersource select(mapColumn(",
				"          Custkey,",
				"          trg_CustomerID = CustomerID,",
				"          trg_Fname = Fname,",
				"          trg_Location = Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selecttrg",
				"selectsrc, selecttrg lookup(src_CustomerID == trg_CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(Custkey),",
				"     !isNull(Custkey),",
				"     disjoint: false) ~> split1@(newrecords, existedrecords)",
				"split1@newrecords select(mapColumn(",
				"          CustomerID = src_CustomerID,",
				"          Fname = src_Fname,",
				"          Location = src_Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"split1@existedrecords derive(flag = iif(src_Fname!=trg_Fname||src_Location!=trg_Location, 1, 0)) ~> derivedColumn1",
				"derivedColumn1 filter(flag==1) ~> filter1",
				"filter1 select(mapColumn(",
				"          CustomerID = src_CustomerID,",
				"          Fname = src_Fname,",
				"          Location = src_Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1, select2 union(byName: true)~> union1",
				"union1 derive(StartDate = currentDate()) ~> derivedColumn2",
				"filter1 select(mapColumn(",
				"          Custkey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(EndDate = currentDate()) ~> derivedColumn3",
				"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Custkey as integer,",
				"          CustomerID as integer,",
				"          Fname as string,",
				"          Location as string,",
				"          StartDate as date,",
				"          EndDate as date",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'dimcustomer',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          Fname,",
				"          Location,",
				"          StartDate",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Custkey as integer,",
				"          CustomerID as integer,",
				"          Fname as string,",
				"          Location as string,",
				"          StartDate as date,",
				"          EndDate as date",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'dimcustomer',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['Custkey'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Custkey,",
				"          EndDate",
				"     )) ~> sink2"
			]
		}
	}
}