{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Employee ID} as integer,",
				"          Name as string,",
				"          Job as string,",
				"          {Department Number} as integer,",
				"          {Hire Date} as date,",
				"          Salary as double,",
				"          Commission as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(grosssalary = iif(isNull(Commission), Salary, Salary+Commission),",
				"          Name = upper(Name),",
				"          year = year({Hire Date}),",
				"          month = case(\r",
				"    month({Hire Date})==1,\"Jan\",\r",
				"    month({Hire Date})==2,\"feb\",\r",
				"    month({Hire Date})==3,\"march\",\r",
				"\r",
				"    \"other\"\r",
				"    )) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          {Employee ID},",
				"          Name,",
				"          Job,",
				"          {Department Number},",
				"          {Hire Date},",
				"          Salary,",
				"          Commission,",
				"          grosssalary,",
				"          year,",
				"          month",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['derived'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}